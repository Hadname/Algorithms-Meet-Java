//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@   @@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@%   @@@@@                    @@@@@@@@@    @@@@*              @@@@@@@@@@@   @@@@@@     %@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@   @@@@@@@@@@@@@@@@,   @@@@@@@@@@@@@@@@@@%   @@@@@@@@   /@@@@@@@@@,   @@@@@@@@@@@    @@*  *********   @@@@   @@@@   @@@@@@@@@@   @@@@@   @@@@@@   @@@@@@@    @@@@@@@@@@
//@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%   @@@@@@@@   %@@@@@@@@%   @@@@@@@@@@@@@@   @*  @@@@@@@@@   @@@@   @@@@   @@@@@@@@@@@@@ @@    @@@@@@    @@@@@@   @@@@@@@@@@@@
//@@@@@@@@   @@@@@@                        @@@@@@@@%   @@@@@@@@   @@@@@@@@@   @@@@@@@@@@@@@@@@@@@*  &&&&&&&&&   @@@@   @@@@   @@@@@@@@@@     @. @@@@@%    @   ,@@@@@@@@@@@@@@@@@@
//@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@             .@@@    @@@@@@@   @@@@@@@@@@@  %@@@@@@*              @@@@   @@@@   @@@@@@     @@@@@@@&      @@@@@@      /@@@@@@@@@@@@@
//@@@@@@@@   @@@@@@@@@  @@@@@@@@@@@@@  @@@@@@@@@@@@%   @@@@@@@@    .@@@@@          @@@@@(    @@@@*  @@@@@@@@@   @@@@   @@@@   @@@@    @@@@@@@     (@@@@@@@@@@@@@@&     .@@@@@@@@@
//@@@@@@@@   @@@@@@@@   (@@@@@@@@@@@    @@@@@@@@@@@%   @@@@@@@@     @@@@@@@@@@@@   @@@@@@@@   .@@*  @@@@@@@@@   @@@@   @@@@   @@@@@@@@                              @@@@@@@@@@@@@
//@@@@@@@@   @@@@@@@@@   @@@@@@@@@@    @@@@@@@@@@@@%   @@@@@@@*      @@@@@@@@@@   @@@@@@@@@@@@@@@*              @@@@   @@@@   @@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@#   @@@@@@@@@@@@@
//@@@@@@@@   @@@@@@@@@@   @@@@@@@@#   @@@@@@@@@@@@@%   @@@@@@@   @@    @@@@@@@   @@@@@@@@@@@@@@@@*  @@@@@@@@@   @@@@   @@@@   @@@@@@@@                              @@@@@@@@@@@@@
//@@@@@@@@   @@@@@@@@@@    @@@@@@@   @@@@@@@@@@@@@@%   @@@@@@,   @@@&   @@@@.   @@@@@@@@@@@@   @@*  @@@@@@@@@   @@@@   @@@@   @@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@#   @@@@@@@@@@@@@
//@@@@@@@@   @@@   @@@@@    @@@@@   @@@@@@@@@@@@@@@%       @@   @@@@@@    @   .@@@@@@@@@@@@    @@*              @@@@   @@@@   @@@@@@@@                              @@@@@@@@@@@@@
//@@@@@            @@@@@@  @@@@@   (@@@@@@@@@@           @@*   @@@@@@@@@     @@@@@@@@@@@@@(   @@@*  @@@@@@@@@   @@@@   @@@@   @@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@#   @@@@@@@@@@@@@
//@@      @@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@  @@@@@@@@@@    @@@@@@@.         @@@@@@@@@@@   @@@@@@,   @@@@    @@@@@@@@@@@@   @@@@@@@@                              @@@@@@@@@@@@@
//@@@@@@@@@@@@@@,                            @@@@@@@@@@@    @@@@@      .@@@@@      @@@@@@    @@@@&   @@@@@@@@    @@@@@@@@@/   @@@@@@@@@@@@,     @@@@@@@@@      @@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@/      @@@@@@@@@@@@     @@@    @@@    (@@@@@@@@@@#  @@@@        @@@@%          @@@@@@@@@@@@@@@@@@          @@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@   ,@@@@@@@@@@@@@@@@@@@@ &@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@ #@@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@     @@@@@@@@@@@@@@@@@@@    @@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@   @   @@@@@@@@@@@@@@@@@    @@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@#   @@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@,   @@@    @@@@@@@@@@@@@@    @@@@@@                       @@@@@@   @@@@@@@@@   @@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@%   #@@@@@@    @@@@@@@@@@@    @@@@@@   @@@@@@@@@@@@@@@@@    @@              @@   @@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@               @@    .@@@@@@@@@@    /@@@@@@@     @@@@    @@@@@@@   @@@@@@@    @@@@@@   &@@@,  ,@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@       #                  @@@@,      @@@@  &@@@@@@@@   @@@@@@    @@@@@@@   @@@@   @@@   @@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@               @@@@@@@@@@   @@@@@@@@@@@@@        @@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@(  ,@@@@   @@@   @@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@   @@@@@@@@@@   @@@@@@@@@@@    @@    @@@@@@@@   @@@@   @@@@   ,@@@@@@@@   @@@@@   @@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@   @@@@@@@@@@   @@@@@@@@@@@@ @@@@    @@@@@@@   @@@@@   @@@@@    @@@@@@   &@@@@   @@@@   @@@.  @@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@               @                     @@@@@@@@    @@@@@%   @@@@@@   @@@@@@    @@@@@    .@@   /@@@@   @@@@   #@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@    @@@@    @@@@@@@   @@@@@@@.   @@@@@@@       @@@@@   @@@@@@   @@@     /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@                  ,@@@@@@@@   @@@@@@@@@@@@@@@@@    @@@    @@@@@@@@   @@@@@@@@(   @@@@@@@@     @@@@@   @@@@@@@      (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@    @@@@  @@@@@@@@@   @@@@@@@@@%&@@@@@@@    @     @@   @@@@@@ .@     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@    @@@@@@ @@@          &@@@@       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@    @@@@@@@@         @@@@@@@@@@@@@@@    @@@@@@@@@@@      @@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
public class IslandCounting4107056019 extends IslandCounting{
	public int count(String[] A, String[] B){
		try{
			return new NumberWay().count(A,B);
		}catch(Exception BULL_SHIT_ERROR){
			return new StringWay().count(A,B);
		}
	}

	class NumberWay extends IslandCounting{
		int[] UNION_FUCK_YOU;
		int NUMBER_OF_FUCKING_NODE;
		int NUMBER_OF_FUCKING_UNION;

		public int count(String[] A, String[] B){
			int LEN_NING_ZO_GONG_ZO_MA = A.length;
			UNION_FUCK_YOU = new int[10000000];
			NUMBER_OF_FUCKING_NODE = 0;
			NUMBER_OF_FUCKING_UNION = 0;

			for(int IDIOT=0; IDIOT<LEN_NING_ZO_GONG_ZO_MA; IDIOT++){
				GANNINIANG_MOTHER_FUCK_union(Integer.parseInt(A[IDIOT])+1, Integer.parseInt(B[IDIOT])+1);
			}
			return NUMBER_OF_FUCKING_NODE - NUMBER_OF_FUCKING_UNION;
		}


		final public int FUCK_YOU_FIND(int i){
			int FUCK, YOU, BITCH;
			// Find FUCK
			for(FUCK = i; UNION_FUCK_YOU[FUCK]>=0; FUCK = UNION_FUCK_YOU[FUCK]);
			// Update all node in the path
			for(YOU = i; YOU != FUCK; YOU = BITCH){
				BITCH = UNION_FUCK_YOU[YOU];
				UNION_FUCK_YOU[YOU] = FUCK;
			}
			return FUCK;
		}

		final public void GANNINIANG_MOTHER_FUCK_union(int a, int b){
			if(UNION_FUCK_YOU[a] == 0){
				NUMBER_OF_FUCKING_NODE++;
				UNION_FUCK_YOU[a] = -1;
			}else{
				a = FUCK_YOU_FIND(a);
			}

			if(UNION_FUCK_YOU[b] == 0){
				NUMBER_OF_FUCKING_NODE++;
				UNION_FUCK_YOU[b] = -1;
			}else{
				b = FUCK_YOU_FIND(b);
			}

			if(a == b) return;

			int TEMPURA_HO_JIA = UNION_FUCK_YOU[a] + UNION_FUCK_YOU[b];
			if(UNION_FUCK_YOU[a] > UNION_FUCK_YOU[b]){	// b is bigger than a
				UNION_FUCK_YOU[a] = b;		// b is new root
				UNION_FUCK_YOU[b] = TEMPURA_HO_JIA;	// update b's weight
			}else{				// vice versa
				UNION_FUCK_YOU[b] = a;
				UNION_FUCK_YOU[a] = TEMPURA_HO_JIA;
			}
			NUMBER_OF_FUCKING_UNION++;
		}
	}

	class StringWay extends IslandCounting{
		public int count(String[] A, String[] B){
			int len = A.length;
			int index = 0;
			int indexA, indexB;
			MyHashMap m = new MyHashMap(len<<1);
			UnionFind uf = new UnionFind(len<<1);

			for(int i=0; i<len; i++){
				indexA = m.get(A[i]);
				if(indexA == -1){
					indexA = index++;
					m.put(A[i], indexA);
				}

				indexB = m.get(B[i]);
				if(indexB == -1){
					indexB = index++;
					m.put(B[i], indexB);
				}

				uf.union(indexA, indexB);
			}

			return uf.howManyIsland(index);
		}

		private class UnionFind{
			private int[] unionFindArray;
			private int[] unionFindArrayWeight;
			private int cap;
			private int count;

			UnionFind(int size){
				this.cap = size;
				unionFindArray = new int[cap];
				unionFindArrayWeight = new int[cap];

				for(int i=0; i < cap; i++)
					unionFindArray[i] = i;
			}

			final public int find(int i){
				while(unionFindArray[i] != i){
					unionFindArray[i] = unionFindArray[unionFindArray[i]];
					i = unionFindArray[i];
				}
				return i;
			}

			final public void union(int a, int b){
				a = find(a);
				b = find(b);

				if(a == b) return;
				count++;
				if(unionFindArrayWeight[a] > unionFindArrayWeight[b]){
					unionFindArray[b] = a;
					unionFindArrayWeight[a] += 1 + unionFindArrayWeight[b];
				}else{
					unionFindArray[a] = b;
					unionFindArrayWeight[b] += 1 + unionFindArrayWeight[a];
				}
			}

			final public int howManyIsland(int end){
				return end-count;
			}
		}

		private class MyHashMap{
		    class Entry{
		        public String key;
		        public int val;
		        public Entry next;
		    }

			private int cap;
		    private Entry[] list;

		    MyHashMap(int size){
		        this.cap = size;
		        Entry[] newEntry = new Entry[this.cap];
		        this.list = newEntry;
		    }

			final public void put(String key, int val){
		        int index = (key.hashCode() & 0x7fffffff) % this.cap;
		        Entry newEntry = new Entry();
		        newEntry.key = key;
		        newEntry.val = val;
		        newEntry.next = list[index];
		        list[index] = newEntry;
		    }

		    final public int get(String key){
		        for(Entry current = list[(key.hashCode() & 0x7fffffff) % this.cap]; current!=null; current=current.next){
		            if(current.key.equals(key)){
		                return current.val;
		            }
		        }
		        return -1;
		    }
		}
	}
}
